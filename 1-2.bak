#lang racket
(require rackunit)
;;Binario ma decimal

(define (binades b1 b2 b3 b4)
  (+ (* b1 (expt 2 3)) (* b2 (expt 2 2)) (* b3 (expt 2 1)) (* b4 (expt 2 0))))


;; Minimo

(define(minimo1 a b) (if(< a b)a b))

(define (minimo lista)
  (if (null? (cdr lista))(car lista) (minimo1(car lista) (minimo (cdr lista)))))


(check-equal? (minimo '(1 -1 3 -6 4)) -6)

(define (concatena lista)
  (if (null? lista) ""
  (string-append (string (car lista)) (concatena (cdr lista)))))

(concatena '(#\S #\c #\h #\e #\m #\e #\space #\m #\o #\l #\a))

(define (bindes2 lista)
  (if(null? lista)
     0
     (+ (*(car lista) (expt 2 (- (length lista) 1))) (bindes2 (cdr lista)))))

(bindes2 '(1 1 1 1 1 1 1 1))


;;(define p1 (list (cons 1 2) (list 3 4)))


(define (suma-izq pareja n)
  (cons (+ (car pareja) n) (cdr pareja)))

(define (suma-der pareja n)
  (cons (car pareja) (+ (cdr pareja) n)))

(suma-izq (cons 10 20) 3)  ; ⇒ (13 . 20)
(suma-der (cons 10 20) 5)  ; ⇒ (10 . 25)

(define(suma-impares-pares lista)
  (cond ((null? lista) (cons 0 0))
        ((odd? (car lista)) (suma-izq(suma-impares-pares (cdr lista)) (car lista)))
        (else (suma-der(suma-impares-pares (cdr lista)) (car lista)))))


(check-equal? (suma-impares-pares '(3 2 1 4 8 7 6 5)) '(16 . 20))
(check-equal? (suma-impares-pares '(3 1 5)) '(9 . 0))


;;Mayor cadena y su longitud
(define (mejor-cadena pareja cadena)
  (if (> (string-length cadena)
         (cdr pareja))
      (cons cadena (string-length cadena))
      pareja))

(define (cadena-mayor lista)
  (if (null? lista)
      (cons "" 0)
      (mejor-cadena (cadena-mayor (cdr lista)) (car lista))))

(cadena-mayor '("vamos" "a" "obtener" "la" "cadena" "mayor")) ; ⇒  ("obtener" . 7)
(cadena-mayor '("prueba" "con" "maximo" "igual")) ; ⇒ ("maximo" . 6)
(cadena-mayor '()) ; ⇒ ("" . 0)











